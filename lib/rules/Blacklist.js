// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function(modules, factory) {
    var m;
    if (typeof define === 'function' && define.amd) {
      return define(modules, factory);
    } else {
      return module.exports = factory.apply(null, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = modules.length; _i < _len; _i++) {
          m = modules[_i];
          _results.push(require(m));
        }
        return _results;
      })());
    }
  })(['./Rule'], function(ValidatorRule) {
    var BlacklistValidatorRule;
    return BlacklistValidatorRule = (function(_super) {
      __extends(BlacklistValidatorRule, _super);

      function BlacklistValidatorRule(options) {
        this.options = {
          blacklist: []
        };
        BlacklistValidatorRule.__super__.constructor.apply(this, arguments);
      }

      BlacklistValidatorRule.prototype.getViolationCodes = function() {
        return ['Blacklisted'];
      };

      BlacklistValidatorRule.prototype.validate = function(value) {
        if (__indexOf.call(this.options.blacklist, value) >= 0) {
          return ['Blacklisted'];
        }
        return [];
      };

      return BlacklistValidatorRule;

    })(ValidatorRule);
  });

}).call(this);
